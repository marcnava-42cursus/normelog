#!/usr/bin/env bash
# normelog entrypoint
set -euo pipefail

# Resolve base dir
SCRIPT_DIR="$(CDPATH= cd -- "$(dirname -- "$0")" && pwd)"
BASE_DIR="$(cd "$SCRIPT_DIR/.." && pwd)"

# Detect if running from installation or development
if [[ -d "$BASE_DIR/lib/normelog" ]]; then
	# Installed system-wide (e.g., /usr/local/lib/normelog)
	LIB_DIR="$BASE_DIR/lib/normelog"
elif [[ -d "$BASE_DIR/lib" && -f "$BASE_DIR/lib/version.sh" ]]; then
	# Running from source directory
	LIB_DIR="$BASE_DIR/lib"
else
	echo "Error: Cannot find normelog libraries" >&2
	exit 1
fi

# shell environment
. "$LIB_DIR/env.sh"
. "$LIB_DIR/version.sh"
. "$LIB_DIR/log.sh"
. "$LIB_DIR/compat.sh"
. "$LIB_DIR/config.sh"
. "$LIB_DIR/flags.sh"
. "$LIB_DIR/run_norminette.sh"
. "$LIB_DIR/exclude.sh"
. "$LIB_DIR/parse.sh"
. "$LIB_DIR/filter.sh"
. "$LIB_DIR/stats.sh"
. "$LIB_DIR/format_text.sh"
. "$LIB_DIR/format_json.sh"
. "$LIB_DIR/update_check.sh"
. "$LIB_DIR/update_apply.sh"
. "$LIB_DIR/plugins.sh"

main() {
  nl_env_init
  nl_version_init
  # parse flags first to allow --help/--version early exit
  nl_flags_parse "$@"
  # Early exits for meta flags before any other logic
  if [[ "${NL_SHOW_VERSION:-0}" -eq 1 ]]; then
	echo "normelog ${NL_VERSION}"; exit 0
  fi
  if [[ "${NL_DO_UPDATE:-0}" -eq 1 ]]; then
	nl_update_apply
	exit $?
  fi
  if [[ "${NL_SHOW_HELP:-0}" -eq 1 ]]; then
	local man_file=""
	for candidate in \
	  "$BASE_DIR/share/man/normelog.1" \
	  "$BASE_DIR/share/man/man1/normelog.1" \
	  "/usr/local/share/man/man1/normelog.1" \
	  "/usr/share/man/man1/normelog.1"; do
	  if [[ -f "$candidate" ]]; then
		man_file="$candidate"
		break
	  fi
	done
	if [[ -n "$man_file" ]]; then
	  if command -v nroff >/dev/null 2>&1; then
		nroff -man "$man_file" | sed -e 's/.\x08//g'
	  else
		cat "$man_file"
	  fi
	else
	  nl_flags_help
	fi
	exit 0
  fi
  # Change directory if requested
  if [[ -n "${NL_CHDIR:-}" ]]; then
	if ! cd -- "$NL_CHDIR"; then
	  nl_log_error "Failed to change directory to $NL_CHDIR"
	  exit 1
	fi
  fi
  nl_config_load "$@"

  # Load plugins
  nl_plugins_load

  # (version/help handled above)

  # Call pre-norminette hook
  nl_hook_pre_norminette

  nl_log_debug "Running norminette..."
  local output
  set +e
  output=$(nl_run_norminette)
  rc=$?
  set -e
  if [[ $rc -eq 127 ]]; then
	nl_log_error "norminette not found in PATH"
	exit 127
  fi

  if [[ -z "$output" ]]; then
	nl_log_error "No C files found or norminette produced no output"
	exit 0
  fi

  nl_log_debug "Applying exclusions..."
  output=$(nl_exclude_filter <<<"$output")

  nl_log_debug "Parsing output..."
  local records
  records=$(nl_parse_output <<<"$output")

  # Call post-parse hook
  nl_hook_post_parse

  nl_log_debug "Filtering by error types..."
  local filtered
  filtered=$(nl_filter_errors <<<"$records")

  nl_log_debug "Computing stats..."
  local stats
  stats=$(nl_compute_stats <<<"$filtered")

  # Call post-stats hook
  nl_hook_post_stats

  # Call pre-format hook
  nl_hook_pre_format

  if [[ "$NL_OUTPUT" == "json" ]]; then
	nl_format_json "$filtered" "$stats"
  else
	nl_format_text "$filtered" "$stats"
  fi

  # Check for updates (unless disabled)
  if [[ "${NL_NO_UPDATE_CHECK:-0}" -eq 0 ]]; then
	nl_update_check
  fi
}

main "$@"
